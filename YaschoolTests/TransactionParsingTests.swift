//
//  TransactionTests.swift
//  YaschoolTests
//
//  Created by Ivan Isaev on 13.06.2025.
//

import XCTest
@testable import Yaschool

final class TransactionParsingTests: XCTestCase {
    private var testDateFormatter: ISO8601DateFormatter!
    
    override func setUp() {
        super.setUp()
        testDateFormatter = ISO8601DateFormatter()
    }
    
    override func tearDown() {
        testDateFormatter = nil
        super.tearDown()
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    private let baseCategoryDict: [String: Any] = [
        "id": 1,
        "name": "–ó–∞—Ä–ø–ª–∞—Ç–∞",
        "emoji": "üí∞",
        "isIncome": true
    ]
    
    private func makeTransactionDict(
        id: Int = 1,
        amount: String = "500.00",
        transactionDate: Date = Date(),
        comment: String? = "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü",
        categoryDict: [String: Any]? = nil
    ) -> [String: Any] {
        var dict: [String: Any] = [
            "id": id,
            "amount": amount,
            "transactionDate": testDateFormatter.string(from: transactionDate)
        ]
        
        if let comment {
            dict["comment"] = comment
        }
        
        if let categoryDict {
            dict["category"] = categoryDict
        }
        
        return dict
    }
    
    // MARK: - –£—Å–ø–µ—à–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    func testValidTransactionParsing() {
        let transactionDict: [String: Any] = makeTransactionDict(categoryDict: baseCategoryDict)
        
        guard let transaction = Transaction.parse(jsonObject: transactionDict) else {
            XCTFail("–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
            return
        }
        
        XCTAssertEqual(transaction.id, 1)
        XCTAssertEqual(transaction.amount, Decimal(string: "500.00"))
        XCTAssertEqual(transaction.comment, "–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü")
        XCTAssertEqual(transaction.category.id, 1)
        XCTAssertEqual(transaction.category.name, "–ó–∞—Ä–ø–ª–∞—Ç–∞")
        XCTAssertEqual(transaction.category.emoji, "üí∞")
        XCTAssertTrue(transaction.category.isIncome)
    }
    
    // MARK: - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    func testMissingRequiredFields() {
        let testCases: [(String, [String: Any])] = [
            ("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id", [:]),
            ("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç amount", ["id": 1]),
            ("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç transactionDate", ["id": 1, "amount": "500.00"]),
            ("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç category", ["id": 1, "amount": "500.00", "transactionDate": testDateFormatter.string(from: Date())])
        ]
        
        for (testCaseName, transactionDict) in testCases {
            XCTAssertNil(Transaction.parse(jsonObject: transactionDict), testCaseName)
        }
    }
    
    // MARK: - –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    func testInvalidTypes() {
        let testCases: [(String, [String: Any])] = [
            ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø id", ["id": "not a number", "amount": "500.00", "transactionDate": testDateFormatter.string(from: Date()), "category": baseCategoryDict]),
            ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø amount", ["id": 1, "amount": 123, "transactionDate": testDateFormatter.string(from: Date()), "category": baseCategoryDict]),
            ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø transactionDate", ["id": 1, "amount": "500.00", "transactionDate": 123, "category": baseCategoryDict]),
            ("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø category", ["id": 1, "amount": "500.00", "transactionDate": testDateFormatter.string(from: Date()), "category": "not a dictionary"])
        ]
        
        for (testCaseName, transactionDict) in testCases {
            XCTAssertNil(Transaction.parse(jsonObject: transactionDict), testCaseName)
        }
    }
    
    // MARK: - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    func testInvalidValues() {
        let testCases: [(String, [String: Any])] = [
            ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞", ["id": 1, "amount": "not a decimal", "transactionDate": testDateFormatter.string(from: Date()), "category": baseCategoryDict]),
            ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞", ["id": 1, "amount": "500.00", "transactionDate": "invalid date", "category": baseCategoryDict]),
            ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", ["id": 1, "amount": "500.00", "transactionDate": testDateFormatter.string(from: Date()), "category": ["id": "not a number", "name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "emoji": "üí∞", "isIncome": true]]),
            ("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π isIncome", ["id": 1, "amount": "500.00", "transactionDate": testDateFormatter.string(from: Date()), "category": ["id": 1, "name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "emoji": "üí∞", "isIncome": "not a boolean"]])
        ]
        
        for (testCaseName, transactionDict) in testCases {
            XCTAssertNil(Transaction.parse(jsonObject: transactionDict), testCaseName)
        }
    }
    
    // MARK: - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    func testOptionalFields() {
        let transactionDict: [String: Any] = makeTransactionDict(
            comment: nil,
            categoryDict: baseCategoryDict
        )
        
        guard let transaction = Transaction.parse(jsonObject: transactionDict) else {
            XCTFail("–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è")
            return
        }
        
        XCTAssertEqual(transaction.comment, nil)
    }
    
    // MARK: - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    func testInvalidCategoryFields() {
        let categoryDict: [String: Any] = [
            "id": 1,
            "name": "", // –ü—É—Å—Ç–æ–µ –∏–º—è
            "emoji": "",
            "isIncome": true
        ]
        
        let transactionDict: [String: Any] = makeTransactionDict(categoryDict: categoryDict)
        
        XCTAssertNil(Transaction.parse(jsonObject: transactionDict), "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π emoji")
        
        // TODO: –ú–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ?
//        XCTAssertEqual(transaction.category.name, "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    }
}
